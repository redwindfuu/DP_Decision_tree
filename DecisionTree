{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","language":"python","display_name":"Python 3 (ipykernel)"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np"],"metadata":{"id":"glaaDwgZpMyZ","executionInfo":{"status":"ok","timestamp":1671987103003,"user_tz":-420,"elapsed":398,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["titanic = pd.read_csv(\"data.csv\")\n","titanic_lite = titanic.loc[:,[\"Embarked\", \"Age\", \"Fare\",\"Survived\"]]\n","titanic_lite = titanic_lite.loc[titanic_lite.isna().sum(axis = 1)==0,:]"],"metadata":{"id":"sqh3PyeO1IbA","executionInfo":{"status":"ok","timestamp":1671987103609,"user_tz":-420,"elapsed":9,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["titanic_lite"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Eb7WmLSZcisb","executionInfo":{"status":"ok","timestamp":1671987103610,"user_tz":-420,"elapsed":10,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}},"outputId":"05d110aa-58ed-4725-cf98-eff6085cf186"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Embarked   Age     Fare  Survived\n","0          S  22.0   7.2500         0\n","1          C  38.0  71.2833         1\n","2          S  26.0   7.9250         1\n","3          S  35.0  53.1000         1\n","4          S  35.0   8.0500         0\n","..       ...   ...      ...       ...\n","885        Q  39.0  29.1250         0\n","886        S  27.0  13.0000         0\n","887        S  19.0  30.0000         1\n","889        C  26.0  30.0000         1\n","890        Q  32.0   7.7500         0\n","\n","[712 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-cb938d24-0349-471e-b129-05dac491ed10\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Embarked</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>S</td>\n","      <td>22.0</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>C</td>\n","      <td>38.0</td>\n","      <td>71.2833</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>S</td>\n","      <td>26.0</td>\n","      <td>7.9250</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>S</td>\n","      <td>35.0</td>\n","      <td>53.1000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>S</td>\n","      <td>35.0</td>\n","      <td>8.0500</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>885</th>\n","      <td>Q</td>\n","      <td>39.0</td>\n","      <td>29.1250</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>S</td>\n","      <td>27.0</td>\n","      <td>13.0000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>S</td>\n","      <td>19.0</td>\n","      <td>30.0000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>C</td>\n","      <td>26.0</td>\n","      <td>30.0000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>Q</td>\n","      <td>32.0</td>\n","      <td>7.7500</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>712 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb938d24-0349-471e-b129-05dac491ed10')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cb938d24-0349-471e-b129-05dac491ed10 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cb938d24-0349-471e-b129-05dac491ed10');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["from matplotlib import pyplot as plt\n","plt.hist(titanic_lite['Age'])\n","plt.xlabel('Age')\n","plt.ylabel('Number of Records');"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"_aRzJBD9Z9eX","executionInfo":{"status":"ok","timestamp":1671987104483,"user_tz":-420,"elapsed":881,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}},"outputId":"8d91b231-ee32-453a-d667-795d8941700e"},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# nhiễu cho các phần tử truy vấn đơn\n","def laplace_mech(v, sensitivity, epsilon):\n","    return v + np.random.laplace(loc=0, scale=sensitivity/epsilon)"],"metadata":{"id":"FDdyRr1bIfm-","executionInfo":{"status":"ok","timestamp":1671987104483,"user_tz":-420,"elapsed":22,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["epsilon_i = 1\n","plt.plot([laplace_mech(titanic_lite['Age'].clip(lower=0, upper=i).sum(), i, epsilon_i) for i in range(0,100)])\n","plt.xlabel('Clipping Bound for age')\n","plt.ylabel('Total Sum');\n","#80\n","# plt.plot([laplace_mech(data['Fare'].clip(lower=0, upper=i).sum(), i, epsilon_i) for i in range(130,200)])\n","# plt.xlabel('Clipping Bound for Fare')\n","# plt.ylabel('Total Sum');"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"WC_Gp0vCBO_U","executionInfo":{"status":"ok","timestamp":1671987104484,"user_tz":-420,"elapsed":22,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}},"outputId":"4b462a3a-916f-42e8-a706-1a9e0783da2f"},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["Sensitivities ={\n","    \"Age\": {\"sum\": 70,\"sum_square\":8100},\n","    \"Fare\":{\"sum\": 350,\"sum_square\":350},\n","}\n","EPSILON = 4"],"metadata":{"id":"HfF8Vm6NcjDI","executionInfo":{"status":"ok","timestamp":1671987486694,"user_tz":-420,"elapsed":396,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["# nhiễu cho các phần tử truy vấn hàm \n","def noise_laplace(colunm,method,epsilon):\n","  if method != \"count\":\n","    sensitivity = float(Sensitivities[colunm][method])\n","  else:\n","    sensitivity = 1\n","  return np.random.laplace(0, sensitivity*1.0/epsilon)"],"metadata":{"id":"PirpLMppgiot","executionInfo":{"status":"ok","timestamp":1671987104484,"user_tz":-420,"elapsed":19,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["h = noise_laplace(\"Age\" , \"sum\",1)\n","h"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fS7691GHhEkz","executionInfo":{"status":"ok","timestamp":1671987104485,"user_tz":-420,"elapsed":20,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}},"outputId":"e3b15615-207c-4138-eb43-ba5ffaf6c7eb"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-67.9296281957489"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["def use_query_DP(data, colunm, query_type, epsilon):\n","        if (query_type == \"mean\"):\n","            partial_epsilon = epsilon/2\n","            noisy_sum = data[colunm].sum()+ noise_laplace(colunm, \"sum\", partial_epsilon)\n","            noisy_count = data[colunm].count()+ noise_laplace(colunm, \"count\", partial_epsilon)\n","            noisy_mean = noisy_sum/noisy_count\n","            return noisy_mean\n","        elif (query_type == \"max\"):\n","            return data[colunm].max()+ noise_laplace(colunm, \"sum\", epsilon)\n","        elif (query_type == \"min\"):\n","            return data[colunm].min()+ noise_laplace(colunm, \"sum\", epsilon)\n","        elif (query_type == \"median\"):\n","            return data[colunm].median()+ noise_laplace(colunm, \"sum\", epsilon)\n","        elif (query_type == \"mode\"):\n","            return data[colunm].mode()+ noise_laplace(colunm, \"sum\", epsilon)\n","        elif (query_type == \"sum\"):\n","            return data[colunm].sum()+ noise_laplace(colunm, \"sum\", epsilon)\n","        elif (query_type == \"count\"):\n","            return data[colunm].count()+ noise_laplace(colunm, \"count\", epsilon)\n","        elif query_type == \"variance\":\n","          partial_epsilon = epsilon/3\n","          square_sum = sum((data[colunm][i])**2 for i in range(data[colunm].count()))\n","          noisy_square_sum = square_sum +  noise_laplace(colunm, \"sum_square\", partial_epsilon)\n","          noisy_sum = data[colunm].sum()+ noise_laplace(colunm, \"sum\", partial_epsilon)\n","          noisy_count = data[colunm].count()+ noise_laplace(colunm, \"count\", partial_epsilon)\n","          noisy_mean = noisy_sum/noisy_count\n","          noisy_var = (1/noisy_count)*(noisy_square_sum - 2*noisy_mean*noisy_sum) + noisy_mean*noisy_mean\n","          return noisy_var\n","        else :\n","          raise \"Not implemented\""],"metadata":{"id":"BjvjCZsxo4aO","executionInfo":{"status":"ok","timestamp":1671987104486,"user_tz":-420,"elapsed":17,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["use_query_DP(titanic_lite, \"Survived\", \"count\" ,1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Q40hA081Pa5","executionInfo":{"status":"ok","timestamp":1671987104486,"user_tz":-420,"elapsed":17,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}},"outputId":"515827fa-ada7-4804-ca2f-6ab410b40245"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["711.2007103007494"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["\n","def entropy(data ,y):\n","  if isinstance(data[y], pd.Series):\n","      set_column = data[y].unique()\n","      maxtrix = dict()\n","      for item in set_column:\n","        rel = use_query_DP(data[:][data[y] == item] ,y , \"count\" ,EPSILON )\n","        maxtrix[item] = int(rel)\n","      val_count = pd.Series(maxtrix)\n","      shape = use_query_DP(data,y,\"count\",EPSILON)\n","      a = val_count/shape\n","      entropy = np.sum(-a*np.log2(a+1e-9))\n","      return(entropy)\n","  else:\n","    raise('Object must be a Pandas Series.')\n"],"metadata":{"id":"_hcJ6EyxnAB_","executionInfo":{"status":"ok","timestamp":1671987104487,"user_tz":-420,"elapsed":15,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["print(entropy(titanic_lite, \"Survived\"))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VEskl5zffeWN","executionInfo":{"status":"ok","timestamp":1671987105215,"user_tz":-420,"elapsed":742,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}},"outputId":"95bce8f2-3a1c-40e1-f499-44a224ba7cdb"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9746291779863996\n"]}]},{"cell_type":"code","source":["def information_gain(y,data, mask, func=entropy):\n","  try:\n","    a = sum(mask)\n","    b = mask.shape[0] - a\n","    label = y.name\n","    col , col_label= pd.DataFrame(y[mask]) , y[mask].name\n","    col_2, col_2_label= pd.DataFrame(y[-mask]),y[-mask].name\n","    if(a == 0 or b ==0): \n","      ig = 0\n","    else:\n","      ig = entropy(data= data,y = label)-a/(a+b)*entropy(col,col_label)-b/(a+b)*entropy(col_2,col_2_label)\n","    return ig\n","  except Exception as e:\n","    raise(e)"],"metadata":{"id":"V_qUWcXPnQYL","executionInfo":{"status":"ok","timestamp":1671987105215,"user_tz":-420,"elapsed":7,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["import itertools\n","\n","def categorical_options(a):\n","  a = a.unique()\n","\n","  opciones = []\n","  for L in range(0, len(a)+1):\n","      for subset in itertools.combinations(a, L):\n","          subset = list(subset)\n","          opciones.append(subset)\n","\n","  return opciones[1:-1]\n","\n","def max_information_gain_split(x, data , y, func=entropy):\n","  \n","  split_value = []\n","  ig = []\n","  numeric_variable = True if x.dtypes != 'O' else False\n","\n","  # Create options according to variable type\n","  if numeric_variable:\n","    options = x.sort_values().unique()[1:]\n","  else: \n","    options = categorical_options(x)\n","  # Calculate ig for all values\n","  for val in options:\n","    if numeric_variable == True :\n","      val = laplace_mech(val, 1, EPSILON)\n","    mask =   x < val if numeric_variable else x.isin(val)\n","    val_ig = information_gain(y, data, mask, func)\n","    # Append results\n","    ig.append(val_ig)\n","    split_value.append(val)\n","  # Check if there are more than 1 results if not, return False\n","  if len(ig) == 0:\n","    return(None,None,None, False)\n","\n","  else:\n","  # Get results with highest IG\n","    best_ig = max(ig)\n","    best_ig_index = ig.index(best_ig)\n","    best_split = split_value[best_ig_index]\n","    return(best_ig,best_split,numeric_variable, True)\n","\n"],"metadata":{"id":"_GgpFcOnoYFi","executionInfo":{"status":"ok","timestamp":1671987105216,"user_tz":-420,"elapsed":7,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["\n","def get_best_split(y, data):\n","\n","  masks = data.drop(y, axis= 1).apply(max_information_gain_split,data=data ,y = data[y])\n","  if sum(masks.loc[3,:]) == 0:\n","    return(None, None, None, None)\n","\n","  else:\n","    # Get only masks that can be splitted\n","    masks = masks.loc[:,masks.loc[3,:]]\n","\n","    # Get the results for split with highest IG\n","    split_variable = max(masks)\n","    split_value = masks[split_variable][1] \n","    split_ig = masks[split_variable][0]\n","    split_numeric = masks[split_variable][2]\n","\n","    return(split_variable, split_value, split_ig, split_numeric)\n","\n","\n","def make_split(variable, value, data, is_numeric):\n","  if is_numeric:\n","    data_1 = data[data[variable] < value]\n","    data_2 = data[(data[variable] < value) == False]\n","\n","  else:\n","    data_1 = data[data[variable].isin(value)]\n","    data_2 = data[(data[variable].isin(value)) == False]\n","\n","  return(data_1,data_2)\n","\n","def make_prediction(data, y , target_factor):\n","  if target_factor:\n","    set_column = data[y].unique()\n","    max_value, amount = set_column[0] , 0\n","    for item in set_column:\n","      rel = use_query_DP(data[:][data[y] == item] ,y , \"count\" ,EPSILON )\n","      if (rel > amount):\n","        max_value, amount = item, rel\n","    pred = max_value\n","  else:\n","    pred  = use_query_DP(data,y,\"mean\",EPSILON) \n","\n","  return pred"],"metadata":{"id":"s9dTabP9owu5","executionInfo":{"status":"ok","timestamp":1671987105216,"user_tz":-420,"elapsed":6,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["def clasificar_datos(observacion, arbol):\n","  question = list(arbol.keys())[0] \n","\n","  if question.split()[1] == '<=':\n","\n","    if observacion[question.split()[0]] <= float(question.split()[2]):\n","      answer = arbol[question][0]\n","    else:\n","      answer = arbol[question][1]\n","\n","  else:\n","\n","    if observacion[question.split()[0]] in (question.split()[2]):\n","      answer = arbol[question][0]\n","    else:\n","      answer = arbol[question][1]\n","  if not isinstance(answer, dict):\n","    return answer\n","  else:\n","    residual_tree = answer\n","    return clasificar_datos(observacion, answer)"],"metadata":{"id":"uzefQ1SApDqA","executionInfo":{"status":"ok","timestamp":1671987105216,"user_tz":-420,"elapsed":6,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["def train_tree(data,y, target_factor, max_depth = None,min_samples_split = None, min_information_gain = 1e-20, counter=0, max_categories = 20):\n","  # Check  max_categories đã đúng chưa\n","  if counter==0:\n","    types = data.dtypes\n","    check_columns = types[types == \"object\"].index\n","    for column in check_columns:\n","      var_length = len(data[column].value_counts()) \n","      if var_length > max_categories:\n","        raise ValueError('The variable ' + column + ' has '+ str(var_length) + ' unique values, which is more than the accepted ones: ' +  str(max_categories))\n","\n","  #check dộ sâu\n","  if max_depth == None:\n","    depth_cond = True\n","\n","  else:\n","    if counter < max_depth:\n","      depth_cond = True\n","\n","    else:\n","      depth_cond = False\n","\n","  # check điều kiện mẫu\n","  if min_samples_split == None:\n","    sample_cond = True\n","\n","  else:\n","    if data.shape[0] > min_samples_split:\n","      sample_cond = True\n","\n","    else:\n","      sample_cond = False\n","\n","  # check đk ig\n","  if depth_cond & sample_cond:\n","\n","    var,val,ig,var_type = get_best_split(y, data)\n","\n","    # If đk ig  đúng  thực hiện split \n","    if ig is not None and ig >= min_information_gain:\n","\n","      counter += 1\n","\n","      left,right = make_split(var, val, data,var_type)\n","\n","      # khởi tạo sub-tree\n","      split_type = \"<=\" if var_type else \"in\"\n","      question =   \"{} {}  {}\".format(var,split_type,val)\n","      # question = \"\\n\" + counter*\" \" + \"|->\" + var + \" \" + split_type + \" \" + str(val) \n","      subtree = {question: []}\n","\n","\n","      #(recursion)\n","      yes_answer = train_tree(left,y, target_factor, max_depth,min_samples_split,min_information_gain, counter)\n","\n","      no_answer = train_tree(right,y, target_factor, max_depth,min_samples_split,min_information_gain, counter)\n","\n","      if yes_answer == no_answer:\n","        subtree = yes_answer\n","\n","      else:\n","        subtree[question].append(yes_answer)\n","        subtree[question].append(no_answer)\n","\n","    #nếu không đúng với điều kiện của ig thực hiện dự đoán\n","    else:\n","      pred = make_prediction(data,y,target_factor)\n","      return pred\n","\n","   #ngưng khi ko đúng độ sâu và điều kiện\n","  else:\n","    pred = make_prediction(data,y,target_factor)\n","    return pred\n","\n","  return subtree\n"],"metadata":{"id":"o2AgG6MtozNf","pycharm":{"is_executing":true},"executionInfo":{"status":"ok","timestamp":1671987105217,"user_tz":-420,"elapsed":6,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["\n","titanic_tree = train_tree(titanic_lite,'Survived',True, max_depth=12, min_samples_split=10)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3W2MnAWZZtzn","executionInfo":{"status":"ok","timestamp":1671987143033,"user_tz":-420,"elapsed":37822,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}},"outputId":"98cb8525-2dd7-4ca4-dd11-0edbfe94dff5"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/pandas/core/arraylike.py:364: RuntimeWarning: invalid value encountered in log2\n","  result = getattr(ufunc, method)(*inputs, **kwargs)\n"]}]},{"cell_type":"code","source":["titanic_prediction = []\n","num_obs = 20\n","\n","for i in range(num_obs):\n","  obs_pred = clasificar_datos(titanic_lite.iloc[i,:], titanic_tree)\n","  titanic_prediction.append(obs_pred)\n","\n","print(\"Predictions: \",titanic_prediction,\n","\"\\n\\nReal values:\", titanic_lite.Survived[:num_obs].to_numpy())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FrRTSOQTasO9","executionInfo":{"status":"ok","timestamp":1671987143034,"user_tz":-420,"elapsed":10,"user":{"displayName":"Phong Mã Chấn","userId":"11528073897992733338"}},"outputId":"a26da0de-42cd-497c-fd49-13ca3c29a523"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["Predictions:  [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1] \n","\n","Real values: [0 1 1 1 0 0 0 1 1 1 1 0 0 0 1 0 0 0 1 1]\n"]}]}]}